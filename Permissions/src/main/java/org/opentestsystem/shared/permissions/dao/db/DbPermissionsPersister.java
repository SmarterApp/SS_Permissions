/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at 
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.permissions.dao.db;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.apache.http.client.HttpResponseException;
import org.opentestsystem.shared.permissions.abstractions.IPermissionsPersister;
import org.opentestsystem.shared.permissions.dao.db.dll.DbPermissionsDll;
import org.opentestsystem.shared.permissions.data.AllowableEntityType;
import org.opentestsystem.shared.permissions.data.Component;
import org.opentestsystem.shared.permissions.data.Permission;
import org.opentestsystem.shared.permissions.data.Permissions;
import org.opentestsystem.shared.permissions.data.Role;
import org.opentestsystem.shared.permissions.exceptions.PermissionsPersistException;
import org.opentestsystem.shared.permissions.exceptions.PermissionsRetrievalException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import AIR.Common.DB.AbstractDAO;
import AIR.Common.DB.SQLConnection;
import TDS.Shared.Exceptions.ReturnStatusException;

@org.springframework.stereotype.Component
public class DbPermissionsPersister extends IPermissionsPersister
{
  private static final Logger _logger = LoggerFactory.getLogger (DbPermissionsPersister.class);
  
  @Autowired
  DbPermissionsDll _dll;
  
  @Autowired
  private AbstractDAO _dao;

  public DbPermissionsPersister () {

  }

  @Override
  public void persist () throws PermissionsPersistException {
    // do nothing as we persist to DB wherever required on-the-spot.
  }

  @Override
  public Collection<Role> getAllRoles () throws PermissionsRetrievalException {
	  try (SQLConnection connection = _dao.getSQLConnection ()) {
		  return _dll.getAllRoles (connection);
	  } catch (ReturnStatusException | SQLException exp) {
	    _logger.error (exp.toString (),exp);
		  throw new PermissionsRetrievalException ("Error getting list of Roles", exp);
	  }

  }

  @Override
  public Role getRoleByRoleName (String name)
      throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      Role r = _dll.getRoleByRoleName (connection, name);
/*      if (r == null)
        throw new ReturnStatusException ("No such role exists.");
*/      return r;
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException ("Error getting Role by name: " + name, exp);
    }
  }

  @Override
  public Collection<Component> getAllComponents ()
      throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      return _dll.getAllComponents (connection);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error getting list of Components", exp);
    }
  }

  @Override
  public Component getComponentByComponentName (String name)
      throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      Component c = _dll.getComponentByComponentName (connection, name);
    //  if (c == null)
      // throw new ReturnStatusException ("No such component exists.");
    
      return c;
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error getting Component by name: " + name, exp);
    }
  }

  @Override
  public List<Role> getRoleByComponent (String componentName)
      throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      return _dll.getRoleByComponent (connection, componentName);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error getting Role by Component: " + componentName, exp);
    }
  }

  @Override
  public List<Role> getRoleByComponentandPermission (String componentName,
      String permission) throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      return _dll.getRoleByComponentandPermission (connection, componentName, permission);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error getting Role by Component: " + componentName + ", and Permission: " + permission, exp);
    }

  }

  @Override
  /**
   * What are all the roles that have mappings to this component?
   */
  public List<Component> getComponentByRole (String roleName)
      throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      return _dll.getComponentByRole (connection, roleName);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error getting Component by Role: " + roleName, exp);
    }
  }

  @Override
  public List<Permission> getPermissionByRoleAndComponent (String roleName,
      String componentName) throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      return _dll.getPermissionByRoleAndComponent (connection, roleName, componentName);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error getting Permission by Role: " + roleName + ", and Component: " + componentName, exp);
    }
  }

  @Override
  public Collection<AllowableEntityType> getAllAllowableEntities ()
      throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      return _dll.getAllAllowableEntities (connection);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error getting all Allowable Entity Types", exp);
    }
  }

  @Override
  protected Permissions customRetrieve () throws PermissionsRetrievalException {
    // Do Nothing
    return null;
  }

  @Override
  public void deleteRole (String roleId) throws PermissionsPersistException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.deleteRole (connection, roleId);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsPersistException ("Error deleting Role: " + roleId, exp);
    }

  }

  @Override
  public void deleteComponent (String componentId)
      throws PermissionsPersistException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.deleteComponent (connection, componentId);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsPersistException ("Error deleting Component: " + componentId, exp);
    }

  }

  @Override
  public void deletePermission (String componentId, String permissionId)
      throws PermissionsPersistException, PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.deletePermission (connection, componentId, permissionId);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsPersistException ("Error deleting Permission: " + permissionId + ", for Component: " + componentId, exp);
    }

  }

  @Override
  public void deleteEntity (String roleId, String entity) throws PermissionsPersistException, PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.deleteEntity (connection, roleId, entity);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error deleting Role-Entity mapping for Role: " + roleId + ", Entity: " + entity, exp);
    }

  }

  @Override
  /**
   * Adds a Role - Allowable Entity Type mapping
   */
  public void addEntity (String roleId, String entity) throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.addEntity (connection, roleId, entity);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error adding Role-Entity mapping for Role: " + roleId + ", Entity: " + entity, exp);
    }

  }

  @Override
  public void addRole (String roleId) throws PermissionsPersistException, PermissionsRetrievalException, HttpResponseException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.addRole (connection, roleId);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error adding Role: "  + roleId, exp);
    }

  }

  @Override
  public void editRole (String roleId, String newRole) throws PermissionsRetrievalException, PermissionsPersistException, HttpResponseException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.editRole (connection, roleId, newRole);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error updating Role: " + roleId + ", with new Name: " + newRole, exp);
    }

  }

  @Override
  public void addComponent (String componentId) throws PermissionsPersistException, PermissionsRetrievalException, HttpResponseException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.addComponent (connection, componentId);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error adding Component: " + componentId, exp);
    }

  }

  @Override
  public void editComponent (String componentId, String newComponent) throws PermissionsPersistException, PermissionsRetrievalException, HttpResponseException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.editComponent (connection, componentId, newComponent);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error updating Component: " + componentId + ", with new new name: " + newComponent, exp);
    }

  }

  @Override
  public void addPermission (String componentId, String permissionId) throws PermissionsPersistException, PermissionsRetrievalException, HttpResponseException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.addPermission (connection, componentId, permissionId);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error adding Permission: " + permissionId + ", for Component: " + componentId, exp);
    }

  }

  @Override
  public void editPermission (String componentId, String permissionId, String newPermission) throws PermissionsRetrievalException, PermissionsPersistException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.editPermission (connection, componentId, permissionId, newPermission);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException (
          "Error editing Permission: " + permissionId + ", for Component: " + componentId + ", with new Permission name: " + newPermission, exp);
    }

  }

  @Override
  public void addMapping (String componentId, String permissionId, String roleId) throws PermissionsPersistException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.addMapping (connection, componentId, permissionId, roleId);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsPersistException ("Error adding mapping with Permission: " + permissionId + ", Role: " +
          roleId + ", and Component: " + componentId, exp);
    }

  }

  @Override
  public void deleteMapping (String componentId, String permissionId, String roleId) throws PermissionsPersistException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      _dll.deleteMapping (connection, componentId, permissionId, roleId);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsPersistException ("Error deleting mapping with Permission: " + permissionId + ", Role: " +
          roleId + ", and Component: " + componentId, exp);
    }

  }

  @Override
  public List<Permission> getAllPermissions () throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      return _dll.getAllPermissions (connection);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException ("Error getting all Permissions", exp);
    }
  }

  @Override
  public Map<String, Object> getAllComponentsAndRoles () throws PermissionsRetrievalException {
	try (SQLConnection connection = _dao.getSQLConnection ()) {
      return _dll.getAllComponentsAndRoles (connection);
    } catch (ReturnStatusException | SQLException exp) {
      _logger.error (exp.toString (),exp);
      throw new PermissionsRetrievalException ("Error getting all Components and Roles", exp);
    }
  }

  @Override
  public List<Permission> getPermissionsByComponent (String componentId) throws PermissionsRetrievalException, HttpResponseException
  {
    List<Permission> permissions = new ArrayList<Permission> ();
    try {
      if (componentId == null || componentId == "")
        return permissions;
      Component c = this.getComponentByComponentName (componentId);
      if (c != null)
      {
        permissions = c.getPermissions ();
      }
    } catch (Exception e) {
      _logger.error (e.toString (),e);
      throw new PermissionsRetrievalException ("Error getting Permission by Component", e);
    }
    return permissions;
  }

}