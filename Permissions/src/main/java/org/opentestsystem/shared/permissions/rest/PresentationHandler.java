/*******************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2013 American Institutes for Research
 * 
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at 
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.permissions.rest;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.apache.http.client.HttpResponseException;
import org.opentestsystem.shared.permissions.data.AllowableEntityType;
import org.opentestsystem.shared.permissions.exceptions.PermissionsPersistException;
import org.opentestsystem.shared.permissions.exceptions.PermissionsRetrievalException;
import org.opentestsystem.shared.permissions.rest.data.ReturnStatus;
import org.opentestsystem.shared.permissions.rest.data.StatusEnum;
import org.springframework.context.annotation.Scope;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
//@RequestMapping("/rest/")
@Scope ("prototype")
public class PresentationHandler extends AbstractHandler
{
  @RequestMapping (value = "role", method = RequestMethod.POST)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> addRole (@RequestParam ("role") String roleId, HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException, HttpResponseException
  {
    getPersister ().addRole (roleId);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (roleId);
    return status;
  }

  @RequestMapping (value = "role", method = RequestMethod.DELETE)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> deleteRole (@RequestParam ("role") String roleId, HttpServletResponse response) throws PermissionsRetrievalException, PermissionsPersistException
  {
    getPersister ().deleteRole (roleId);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (roleId);
    return status;
  }

  @RequestMapping (value = "role", method = RequestMethod.PUT)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> editRole (@RequestParam ("role") String roleId, @RequestParam ("newRole") String newRole, HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException, HttpResponseException
  {
    getPersister ().editRole (roleId, newRole);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (newRole);
    return status;
  }

  @RequestMapping (value = "component", method = RequestMethod.POST)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> addComponent (@RequestParam ("component") String componentId, HttpServletResponse response) throws PermissionsRetrievalException, PermissionsPersistException, HttpResponseException
  {
    getPersister ().addComponent (componentId);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (componentId);
    return status;
  }

  @RequestMapping (value = "component", method = RequestMethod.PUT)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> editComponent (@RequestParam ("component") String componentId, @RequestParam ("newComponent") String newComponent, HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException, HttpResponseException
  {
    getPersister ().editComponent (componentId, newComponent);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (newComponent);
    return status;
  }

  @RequestMapping (value = "component", method = RequestMethod.DELETE)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> deleteComponent (@RequestParam ("component") String componentId, HttpServletResponse response) throws PermissionsRetrievalException, PermissionsPersistException
  {
    getPersister ().deleteComponent (componentId);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (componentId);
    return status;
  }

  @RequestMapping (value = "permission", method = RequestMethod.DELETE)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> deletePermission (@RequestParam ("component") String componentId, @RequestParam ("permission") String permissionId, HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException
  {
    getPersister ().deletePermission (componentId, permissionId);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (permissionId);
    return status;
  }

  @RequestMapping (value = "permission", method = RequestMethod.POST)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> addPermission (@RequestParam ("component") String componentId, @RequestParam ("permission") String permissionId, HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException, HttpResponseException
  {
    getPersister ().addPermission (componentId, permissionId);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (permissionId);
    return status;
  }

  @RequestMapping (value = "permission", method = RequestMethod.PUT)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> editPermission (@RequestParam ("component") String componentId, @RequestParam ("permission") String permissionId, @RequestParam ("newPermission") String newPermission,
      HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException
  {
    getPersister ().editPermission (componentId, permissionId, newPermission);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (permissionId);
    return status;
  }

  @RequestMapping (value = "entity", method = RequestMethod.DELETE)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> deleteEntity (@RequestParam ("role") String roleId, @RequestParam ("entity") String entity, HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException
  {
    getPersister ().deleteEntity (roleId, entity);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (entity);
    return status;
  }

  @RequestMapping (value = "entity", method = RequestMethod.POST)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> addEntity (@RequestParam ("role") String roleId, @RequestParam ("entity") String entity, HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException
  {
    getPersister ().addEntity (roleId, entity);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (entity);
    return status;
  }

  @RequestMapping (value = "mapping", method = RequestMethod.POST)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> addMapping (@RequestParam ("component") String componentId, @RequestParam ("permission") String permissionId, @RequestParam ("role") String roleId,
      HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException
  {
    getPersister ().addMapping (componentId, permissionId, roleId);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (permissionId);
    return status;
  }

  @RequestMapping (value = "mapping", method = RequestMethod.DELETE)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<String> deleteMapping (@RequestParam ("component") String componentId, @RequestParam ("permission") String permissionId, @RequestParam ("role") String roleId,
      HttpServletResponse response)
      throws PermissionsRetrievalException, PermissionsPersistException
  {
    getPersister ().deleteMapping (componentId, permissionId, roleId);
    ReturnStatus<String> status = new ReturnStatus<String> (StatusEnum.SUCCESS, null);
    status.setValue (permissionId);
    return status;
  }

  @RequestMapping (value = "entity", method = RequestMethod.GET)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<List<AllowableEntityType>> getAllAllowableEntities () throws PermissionsRetrievalException
  {
	  List<AllowableEntityType> list= (List<AllowableEntityType>) getPersister ().getAllAllowableEntities ();
	  ReturnStatus<List<AllowableEntityType>> status=new ReturnStatus<List<AllowableEntityType>>(StatusEnum.SUCCESS,null);
	  status.setValue(list);
	  return status;
  }

/*  @RequestMapping (value = "permissions", method = RequestMethod.GET)
  @ResponseBody
  public List<Permission> getAllPermissions () throws PermissionsRetrievalException
  {
    return (List<Permission>) getPersister ().getAllPermissions ();
  }*/

  @RequestMapping (value = "mapping", method = RequestMethod.GET)
  @ResponseBody
  //@Secured({ "ROLE_Administrator Modify" })
  public ReturnStatus<Map<String, Object>> getAllComponentsAndRoles () throws PermissionsRetrievalException
  {
    Map<String, Object> returnValue = this.getPersister ().getAllComponentsAndRoles ();
    ReturnStatus<Map<String, Object>> status= new ReturnStatus<Map<String, Object>>(StatusEnum.SUCCESS,null);
    status.setValue(returnValue);
    return status;
  }
  
  @SuppressWarnings("rawtypes")
@ExceptionHandler(HttpResponseException.class)
  @ResponseBody
  public ReturnStatus  handleException(HttpResponseException e, HttpServletResponse response)
  {
	  response.setStatus(e.getStatusCode());
	  return new ReturnStatus (StatusEnum.FAILURE,e.getMessage());
  }

}
