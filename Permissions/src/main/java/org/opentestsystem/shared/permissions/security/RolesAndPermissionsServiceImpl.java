/*************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2014 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at 
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *************************************************************************/

package org.opentestsystem.shared.permissions.security;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.client.HttpResponseException;
import org.opentestsystem.shared.permissions.abstractions.IPermissionsPersister;
import org.opentestsystem.shared.permissions.data.AllowableEntityType;
import org.opentestsystem.shared.permissions.data.Component;
import org.opentestsystem.shared.permissions.data.Permission;
import org.opentestsystem.shared.permissions.data.Role;
import org.opentestsystem.shared.permissions.exceptions.PermissionsRetrievalException;
import org.opentestsystem.shared.permissions.rest.data.ReturnStatus;
import org.opentestsystem.shared.permissions.rest.data.StatusEnum;
import org.opentestsystem.shared.security.domain.SbacPermission;
import org.opentestsystem.shared.security.domain.permission.RoleToPermissionMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;


/**
 * @author mpatel
 *
 */
public class RolesAndPermissionsServiceImpl extends org.opentestsystem.shared.security.service.RolesAndPermissionsServiceImpl
{

  private static final Logger _logger = LoggerFactory.getLogger (RolesAndPermissionsServiceImpl.class);
  
  @Value("${component.name:}")
  private String _componentName;
  
  @Autowired
  private IPermissionsPersister _persister;

  protected IPermissionsPersister getPersister ()
  {
    return _persister;
  }
  
  @Override
  public Map<String, RoleToPermissionMapping> getKnownRoles () {
    _logger.info  ("Inside getKnownRoles Method of Permission project.......");
      try {
        ReturnStatus<List<Role>> retunrStatus = getRoles (null, _componentName, null);
        return convertToRoles (retunrStatus.getValue ());
      } catch (Exception e) {
        _logger.error (e.toString (),e);
      }
      return null;
  }
  
  public Map<String, RoleToPermissionMapping> convertToRoles(List<Role> rolesList) {
    
    final Map<String, RoleToPermissionMapping> ret = new HashMap<>();
    if (rolesList != null) {
        for (final Role role : rolesList) {
            if(role.getAllowableEntities ()!=null) {
              
            }
            if (role.getMappings() != null) {
                List<SbacPermission> permissionsForThisRole = new ArrayList<>();
                for (final Component mapping : role.getMappings()) {
                    if (mapping.getPermissions() != null) {
                        for (final Permission permission : mapping.getPermissions()) {
                            SbacPermission sbacPermission = new SbacPermission ();
                            sbacPermission.setName (permission.getName ());
                            sbacPermission.setComponentName(mapping.getComponent());
                            permissionsForThisRole.add(sbacPermission);
                        }
                    }
                }
                RoleToPermissionMapping roleToPermissionMapping = new RoleToPermissionMapping(role.getRole(), permissionsForThisRole, isRoleProtected (role));
                ret.put(roleToPermissionMapping.getRoleName(), roleToPermissionMapping);
            }
        }
    }
    return ret;
}
  
  public boolean isRoleProtected(Role role){
    for (Iterator<AllowableEntityType> iterator = role.getAllowableEntities ().iterator(); iterator.hasNext(); ) {
      AllowableEntityType sbacPermissionEntity = iterator.next();
        if (sbacPermissionEntity.getEntity().equals("")) {
            return  true;
        }
    }
    return false;
  }
  
  
  
  public ReturnStatus<List<Role>> getRoles(String roleName,String componentName,String permissionName)
      throws PermissionsRetrievalException, HttpResponseException {
    List<Role> roles;
    if (!StringUtils.isEmpty(componentName)) {
      //if the component does not exist
      if (getPersister().getComponentByComponentName(componentName) == null) {
        throw (new HttpResponseException(404, String.format(
            "Role by component:'%s' is not found.", componentName)));
      }
      if (!StringUtils.isEmpty(permissionName)) {
        // We are going to return roles by component name and
        // permission.
        roles= getPersister().getRoleByComponentandPermission(
            componentName, permissionName);
      } else {
        // just by component name
        roles= getPersister().getRoleByComponent(componentName);
      }
    } else if (!StringUtils.isEmpty(roleName)) {
      // we have been passed a role name.
      roles = new ArrayList<Role>();
      Role role = getPersister().getRoleByRoleName(roleName);
      if (role == null) {
        throw (new HttpResponseException(404, String.format(
            "Role:'%s' is not found.", roleName)));
      }
      roles.add(role);
    } else {
      // no parameters have been passed. return all roles.
      roles = new ArrayList<Role>();
      roles.addAll(getPersister().getAllRoles());   
    }
    ReturnStatus<List<Role>> status=new ReturnStatus<List<Role>>(StatusEnum.SUCCESS,null);
    status.setValue(roles);
    return status;
  }
  
}
