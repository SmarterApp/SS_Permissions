/*************************************************************************
 * Educational Online Test Delivery System
 * Copyright (c) 2014 American Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0
 * See accompanying file AIR-License-1_0.txt or at 
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 *************************************************************************/
package org.opentestsystem.shared.permission.test.db;

import static org.junit.Assert.*;

import java.util.List;

import org.hamcrest.Matchers;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.shared.permissions.dao.db.dll.DbPermissionsDll;
import org.opentestsystem.shared.permissions.data.AllowableEntityType;
import org.opentestsystem.shared.permissions.data.Component;
import org.opentestsystem.shared.permissions.data.Permission;
import org.opentestsystem.shared.permissions.data.Role;
import org.opentestsystem.shared.test.LifecycleManagingTestRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;

import AIR.Common.DB.RollbackConnectionManager;
import AIR.Common.DB.SQLConnection;

@RunWith (LifecycleManagingTestRunner.class)
@ContextConfiguration (locations = "/test-context.xml") 
public class PermissionDLLTest {
	
	@Autowired
	private DbPermissionsDll _dll;
	
	@Autowired
	private RollbackConnectionManager _connectionManager = null;

	@Test
	public void testAddMapping () throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			
			Role ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertEquals(ret.getRole(), "Content Author");
			
			Component cia = new Component(), cta = new Component();
			Permission pia = new Permission(), pta = new Permission();
			pia.setName("Author Items"); 
			pta.setName("Author Tests");
			cia.setComponent("Item Authoring"); cia.addPermission(pia); 
			cta.setComponent("Test Authoring"); cta.addPermission(pta);
			assertThat(ret.getMappings(), Matchers.containsInAnyOrder(cia, cta));
			
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("CLIENT", "Client"), new AllowableEntityType("STATE", "State")));
			
			_dll.addMapping(connection, "Test Authoring", "Approve Tests", "Content Author");
			
			ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertEquals(ret.getRole(), "Content Author");
			
			Permission pta2 = new Permission();
			pta2.setName("Approve Tests");
			cta.addPermission(pta2);
			assertThat(ret.getMappings(), Matchers.containsInAnyOrder(cia, cta));
			
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("CLIENT", "Client"), new AllowableEntityType("STATE", "State")));


		}
	}
	
	@Test
	public void testAddRole() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			_dll.addRole(connection, "role1");
			Role ret = _dll.getRoleByRoleName(connection, "role1");
			assertEquals(ret.getRole(), "role1");
			assertThat(ret.getAllowableEntities(), Matchers.hasSize(0));
			assertThat(ret.getMappings(), Matchers.hasSize(0));
		}
	}
	
	@Test
	public void testEditRole() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			Role ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertEquals(ret.getRole(), "Content Author");
			
			Component cia = new Component(), cta = new Component();
			Permission pia = new Permission(), pta = new Permission();
			pia.setName("Author Items"); 
			pta.setName("Author Tests");
			cia.setComponent("Item Authoring"); cia.addPermission(pia); 
			cta.setComponent("Test Authoring"); cta.addPermission(pta);
			assertThat(ret.getMappings(), Matchers.containsInAnyOrder(cia, cta));
			
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("CLIENT", "Client"), new AllowableEntityType("STATE", "State")));
			
			_dll.editRole(connection, "Content Author", "role1");
			
			ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertNull(ret);
			
			ret = _dll.getRoleByRoleName(connection, "role1");
			assertEquals(ret.getRole(), "role1");
			assertThat(ret.getMappings(), Matchers.containsInAnyOrder(cia, cta));
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("CLIENT", "Client"), new AllowableEntityType("STATE", "State")));
		}
	}
	
	@Test
	public void testDeleteRole() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			Role ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertEquals(ret.getRole(), "Content Author");
			_dll.deleteRole(connection, "Content Author");
			ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertNull(ret);
		}
	}
	
	@Test
	public void testAddComponent() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			_dll.addComponent(connection, "component1");
			Component ret = _dll.getComponentByComponentName(connection, "component1");
			assertEquals(ret.getComponent(), "component1");
			assertThat(ret.getPermissions(), Matchers.hasSize(0));
		}
	}
	
	@Test
	public void testEditComponent() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			Component ret = _dll.getComponentByComponentName(connection, "Test Authoring");
			assertEquals(ret.getComponent(), "Test Authoring");
			
			Permission pta1 = new Permission(), pta2 = new Permission(), pta3 = new Permission();
			pta1.setName("Author Tests"); pta2.setName("Approve Tests"); pta3.setName("Release Tests"); 
			assertThat(ret.getPermissions(), Matchers.containsInAnyOrder(pta1, pta2, pta3));
			
			_dll.editComponent(connection, "Test Authoring", "component1");
			
			ret = _dll.getComponentByComponentName(connection, "Test Authoring");
			assertNull(ret);
			
			ret = _dll.getComponentByComponentName(connection, "component1");
			assertEquals(ret.getComponent(), "component1");
			assertThat(ret.getPermissions(), Matchers.containsInAnyOrder(pta1, pta2, pta3));
		}
	}
	
	@Test
	public void testDeleteComponent() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			Component ret = _dll.getComponentByComponentName(connection, "Test Authoring");
			assertEquals(ret.getComponent(), "Test Authoring");
			_dll.deleteComponent(connection, "Test Authoring");
			ret = _dll.getComponentByComponentName(connection, "Test Authoring");
			assertNull(ret);
		}
	}
	
	@Test
	public void testAddEntity() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			Role ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertEquals(ret.getRole(), "Content Author");			
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("CLIENT", "Client"), new AllowableEntityType("STATE", "State")));

			_dll.addEntity(connection, "Content Author", "DISTRICT");
			
			ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertEquals(ret.getRole(), "Content Author");			
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("DISTRICT", "District"), new AllowableEntityType("CLIENT", "Client"), new AllowableEntityType("STATE", "State")));
		}
	}
	
	@Test
	public void testDeleteEntity() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			Role ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertEquals(ret.getRole(), "Content Author");			
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("CLIENT", "Client"), new AllowableEntityType("STATE", "State")));

			_dll.deleteEntity(connection, "Content Author", "STATE");
			
			ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertEquals(ret.getRole(), "Content Author");			
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("CLIENT", "Client")));
		}
	}
	
	@Test
	public void testAddPermission() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			List<Permission> ret = _dll.getPermissionsByComponent(connection, "Test Authoring");
			
			Permission pta1 = new Permission(), pta2 = new Permission(), pta3 = new Permission(), newpta = new Permission();
			pta1.setName("Author Tests"); pta2.setName("Approve Tests"); pta3.setName("Release Tests"); newpta.setName("permission1");
			assertThat(ret, Matchers.containsInAnyOrder(pta1, pta2, pta3));	
			
			_dll.addPermission(connection, "Test Authoring", "permission1");
			ret = _dll.getPermissionsByComponent(connection, "Test Authoring");			
			assertThat(ret, Matchers.containsInAnyOrder(pta1, pta2, pta3, newpta));			
		}
	}
	
	@Test
	public void testEditPermission() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			Role ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertEquals(ret.getRole(), "Content Author");
			
			Component cia = new Component(), cta = new Component();
			Permission pia = new Permission(), pta = new Permission();
			pia.setName("Author Items"); 
			pta.setName("Author Tests");
			cia.setComponent("Item Authoring"); cia.addPermission(pia); 
			cta.setComponent("Test Authoring"); cta.addPermission(pta);
			assertThat(ret.getMappings(), Matchers.containsInAnyOrder(cia, cta));
			
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("CLIENT", "Client"), new AllowableEntityType("STATE", "State")));
			
			_dll.editRole(connection, "Content Author", "role1");
			
			ret = _dll.getRoleByRoleName(connection, "Content Author");
			assertNull(ret);
			
			ret = _dll.getRoleByRoleName(connection, "role1");
			assertEquals(ret.getRole(), "role1");
			assertThat(ret.getMappings(), Matchers.containsInAnyOrder(cia, cta));
			assertThat(ret.getAllowableEntities(), Matchers.containsInAnyOrder(new AllowableEntityType("CLIENT", "Client"), new AllowableEntityType("STATE", "State")));
		}
	}
	
	@Test
	public void testDeletePermission() throws Exception {
		try (SQLConnection connection = _connectionManager.getConnection()) {
			List<Permission> ret = _dll.getPermissionsByComponent(connection, "Test Authoring");
			
			Permission pta1 = new Permission(), pta2 = new Permission(), pta3 = new Permission(), newpta = new Permission();
			pta1.setName("Author Tests"); pta2.setName("Approve Tests"); pta3.setName("Release Tests"); newpta.setName("permission1");
			assertThat(ret, Matchers.containsInAnyOrder(pta1, pta2, pta3));	
			
			_dll.deletePermission(connection, "Test Authoring", "Approve Tests");
			ret = _dll.getPermissionsByComponent(connection, "Test Authoring");
			assertThat(ret, Matchers.containsInAnyOrder(pta1, pta3));				
		}
	}
	

}
