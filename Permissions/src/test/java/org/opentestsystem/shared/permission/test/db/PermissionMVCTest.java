/*******************************************************************************
 * Educational Online Test Delivery System Copyright (c) 2013 American
 * Institutes for Research
 *
 * Distributed under the AIR Open Source License, Version 1.0 See accompanying
 * file AIR-License-1_0.txt or at
 * http://www.smarterapp.org/documents/American_Institutes_for_Research_Open_Source_Software_License.pdf
 ******************************************************************************/
package org.opentestsystem.shared.permission.test.db;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;

import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.shared.permissions.abstractions.IPermissionsPersister;
import org.opentestsystem.shared.test.LifecycleManagingTestRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import AIR.test.framework.AbstractTest;

@WebAppConfiguration
@RunWith (LifecycleManagingTestRunner.class)
@ContextConfiguration (locations = "/test-context.xml") 
public class PermissionMVCTest extends AbstractTest {

	private static final Logger _logger = LoggerFactory.getLogger(PermissionMVCTest.class);

	@Autowired
	private ApplicationContext _context;

	/**
	 *
	 */
	@Autowired
	private IPermissionsPersister permissions;

	@Autowired
	private WebApplicationContext webApplicationContext;

	private MockMvc mockMvc;

	@Before
	public void setup() {
		this.mockMvc = MockMvcBuilders
				.webAppContextSetup(webApplicationContext).build();
	}

	@Test
	public void getAllRoles() throws Exception {
		this.mockMvc
				.perform(
						get("/role")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(3)))
				.andExpect(jsonPath("$.value[*].role", Matchers.containsInAnyOrder("Content Author", "Content Approver", "Content Kingpin")))
				.andExpect(jsonPath("$.value[*].mappings[*].component[*]", Matchers.hasItems("Item Authoring", "Test Authoring")));
		_logger.info("Got all the roles successfully");
	}

	@Test
	public void getRoleByRoleName() throws Exception {
		this.mockMvc
				.perform(
						get("/role?role=Content Author")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(1)))
				.andExpect(jsonPath("$.value[0].role", Matchers.is("Content Author")))
				.andExpect(jsonPath("$.value[0].mappings", Matchers.hasSize(2)))
				.andExpect(jsonPath("$.value[0].mappings[*].component", Matchers.containsInAnyOrder("Item Authoring", "Test Authoring")));
				;
		_logger.info(String.format("Got role:%s", "Content Author"));
		this.mockMvc
				.perform(
						get("/role?role=invalid_role")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isNotFound())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"));
		_logger.info(String.format("Failed to get role:%s", "invalid_role"));
	}

	@Test
	public void getRoleByComponent() throws Exception {
		this.mockMvc
				.perform(
						get("/role?component=Test Authoring")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(3)))
				.andExpect(jsonPath("$.value[*].role", Matchers.containsInAnyOrder("Content Author", "Content Approver", "Content Kingpin")));
		_logger.info(String.format("Got role by component:%s",
				"Test Authoring"));
		this.mockMvc
				.perform(
						get("/role?component=invalid_component")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isNotFound())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"));
		_logger.info(String.format("Failed to get role by component:%s",
				"invalid_component"));
	}

	@Test
	public void getRoleByComponentAndPermission() throws Exception {
		this.mockMvc
				.perform(
						get(
								"/role?component=Test Authoring&permission=Approve Tests")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(2)))
				.andExpect(jsonPath("$.value[*].role", Matchers.containsInAnyOrder("Content Approver", "Content Kingpin")));
		_logger.info(String.format(
				"Got role by component:%s and permission:%s",
				"Test Authoring", "Approve Tests"));
	}

	@Test
	public void getAllComponents() throws Exception {
		this.mockMvc
				.perform(
						get("/component")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(2)))
				.andExpect(jsonPath("$.value[*].component", Matchers.containsInAnyOrder("Test Authoring", "Item Authoring")));
		_logger.info(String.format("Got all components"));
	}

	@Test
	public void getComponentByComponentName() throws Exception {
		this.mockMvc
				.perform(
						get("/component?component=Test Authoring")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(1)))
				.andExpect(jsonPath("$.value[*].component", Matchers.containsInAnyOrder("Test Authoring")));

		_logger.info(String.format("Got component:%s", "Test Authoring"));
		this.mockMvc
				.perform(
						get("/component?component=invalid_component")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isNotFound())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"));
		_logger.info(String.format("Failed to get component:%s",
				"invalid_component"));
	}

	@Test
	public void getComponentByRoleName() throws Exception {
		this.mockMvc
				.perform(
						get("/component?role=Content Author")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(2)))
				.andExpect(jsonPath("$.value[*].component", Matchers.containsInAnyOrder("Test Authoring", "Item Authoring")));
		_logger.info(String.format("Got component by role:%s", "Content Author"));
		
		this.mockMvc
				.perform(
						get("/component?role=invalid_role")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isNotFound())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"));
		_logger.info(String.format("Failed to get component by role:%s",
				"invalid_role"));
	}

	@Test
	public void getAllPermissions() throws Exception {
		this.mockMvc
				.perform(
						get("/permission")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(5)))
				.andExpect(jsonPath("$.value[*].name", Matchers.containsInAnyOrder("Author Tests", "Release Tests", "Approve Tests", "Author Items", "Approve Items")));
		_logger.info(String.format("Got all permissions."));
	}

	@Test
	public void getPermissionByComponent() throws Exception {
		this.mockMvc
				.perform(
						get("/permission?component=Test Authoring")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(3)))
				.andExpect(jsonPath("$.value[*].name", Matchers.containsInAnyOrder("Author Tests", "Release Tests", "Approve Tests")));

		_logger.info(String.format("Got permission by component:%s", "Test Authoring"));
		
		this.mockMvc
				.perform(
						get("/permission?component=invalid_component")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isNotFound())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"));
	}

	@Test
	public void getAllAllowableEntities() throws Exception {
		this.mockMvc
				.perform(
						get("/entity")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value", Matchers.hasSize(7)))
				.andExpect(jsonPath("$.value[*].entity", Matchers.containsInAnyOrder("CLIENT", "GROUPOFSTATES", "STATE", "GROUPOFDISTRICTS", "DISTRICT", "GROUPOFINSTITUTIONS", "INSTITUTION")));

	}

	@Test
	public void getAllComponentsAndRoles() throws Exception {
		this.mockMvc
				.perform(
						get("/mapping")
								.accept(MediaType
										.parseMediaType("application/json;charset=UTF-8")))
				.andExpect(status().isOk())
				.andExpect(
						content().contentType("application/json;charset=UTF-8"))
				.andExpect(jsonPath("$.value.mappings", Matchers.hasSize(5)))
				.andExpect(jsonPath("$.value.mappings[0]", Matchers.allOf(Matchers.hasEntry("Permission", "Approve Items"), Matchers.hasEntry("Component", "Item Authoring"), Matchers.hasKey("Content Author"), Matchers.hasKey("Content Approver"), Matchers.hasKey("Content Kingpin"))))
				.andExpect(jsonPath("$.value.mappings[0]", Matchers.allOf(Matchers.hasEntry("Content Author", false), Matchers.hasEntry("Content Approver", true), Matchers.hasEntry("Content Kingpin", false))))
				.andExpect(jsonPath("$.value.mappings[1]", Matchers.allOf(Matchers.hasEntry("Permission", "Author Items"), Matchers.hasEntry("Component", "Item Authoring"), Matchers.hasKey("Content Author"), Matchers.hasKey("Content Approver"), Matchers.hasKey("Content Kingpin"))))
				.andExpect(jsonPath("$.value.mappings[1]", Matchers.allOf(Matchers.hasEntry("Content Author", true), Matchers.hasEntry("Content Approver", true), Matchers.hasEntry("Content Kingpin", false))))
				.andExpect(jsonPath("$.value.mappings[2]", Matchers.allOf(Matchers.hasEntry("Permission", "Approve Tests"), Matchers.hasEntry("Component", "Test Authoring"), Matchers.hasKey("Content Author"), Matchers.hasKey("Content Approver"), Matchers.hasKey("Content Kingpin"))))
				.andExpect(jsonPath("$.value.mappings[2]", Matchers.allOf(Matchers.hasEntry("Content Author", false), Matchers.hasEntry("Content Approver", true), Matchers.hasEntry("Content Kingpin", true))))
				.andExpect(jsonPath("$.value.mappings[3]", Matchers.allOf(Matchers.hasEntry("Permission", "Author Tests"), Matchers.hasEntry("Component", "Test Authoring"), Matchers.hasKey("Content Author"), Matchers.hasKey("Content Approver"), Matchers.hasKey("Content Kingpin"))))
				.andExpect(jsonPath("$.value.mappings[3]", Matchers.allOf(Matchers.hasEntry("Content Author", true), Matchers.hasEntry("Content Approver", true), Matchers.hasEntry("Content Kingpin", true))))
				.andExpect(jsonPath("$.value.mappings[4]", Matchers.allOf(Matchers.hasEntry("Permission", "Release Tests"), Matchers.hasEntry("Component", "Test Authoring"), Matchers.hasKey("Content Author"), Matchers.hasKey("Content Approver"), Matchers.hasKey("Content Kingpin"))))
				.andExpect(jsonPath("$.value.mappings[4]", Matchers.allOf(Matchers.hasEntry("Content Author", false), Matchers.hasEntry("Content Approver", false), Matchers.hasEntry("Content Kingpin", true))))
				.andExpect(jsonPath("$.value.roles", Matchers.hasSize(3)))
				.andExpect(jsonPath("$.value.roles[*].role", Matchers.containsInAnyOrder("Content Author", "Content Approver", "Content Kingpin")))
				.andExpect(jsonPath("$.value.roles[*].mappings[*].component[*]", Matchers.hasItems("Item Authoring", "Test Authoring")))
				.andExpect(jsonPath("$.value.roles[*].allowableEntities[*].entity[*]", Matchers.hasItems("STATE", "CLIENT")));
	}

	protected void customBeforeClassSetUp() throws Exception {

	}

	protected void customAfterClassTearDown() throws Exception {

	}

	protected void customBeforeTestSetUp() throws Exception {

	}

	protected void customAfterTestTearDown() throws Exception {

	}
}
